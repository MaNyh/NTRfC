from snakemake.utils import validate

#todo move this snakepipe to according dir in sourcecode

configfile : "casesettings.yaml"
validate(config,"config.schema.yaml")
basedir = workflow.current_basedir



'''

rule all:
    input:  "01_profile/tfd_gwk_compressor_profile.pdf",
            "02_domain/tfd_gwk_compressor_domain.pkl",
            "02_domain/tfd_gwk_compressor_domain.pdf"

'''
rule profile_from_pointcloud:
    input :
        "00_resources/{profile_name}.txt"
    output:
        #todo: is there a readable dataformat alternative (csv) instead of pickle?
        "01_profile/{profile_name}_profile.pkl",
        "01_profile/{profile_name}_profile.pdf"
    params:
        unit = config["blade"]["ptcloud_profile_unit"],
        alpha = config["blade"]["alpha"]
    run:
        from ntrfc.preprocessing.geometry_creation.profile_pointcloud import generate_profile_pointcloud_geometry


        generate_profile_pointcloud_geometry(basedir,{wildcards.profile_name},**params)

rule create_meshboundaries:
    input:
         "01_profile/{profile_name}_profile.pkl" # rules.profile_from_pointcloud.output[0]
    output:
        "02_domain/{profile_name}_domain.pkl",
        "02_domain/{profile_name}_domain.pdf"
    params:
        geometry=config["geometry"]
    run:
        from ntrfc.preprocessing.mesh_creation.domain_creation import create_2d_domain


        create_2d_domain(basedir,{wildcards.profile_name},**params)

"""
rule create_cascademesh:
    input:
    output:
    run:
"""

rule create_meshgeometry:
    input:
        "01_profile/{profile_name}_profile.pkl", ## rules.profile_from_pointcloud.output[0]
        "02_domain/{profile_name}_domain.pkl"    ## rules.create_meshboundaries.output[0]
    output:
        "03_meshgeometry/{profile_name}_blocks.geom",
        "03_meshgeometry/{profile_name}_domain.geom",
        "03_meshgeometry/{profile_name}_blocklines.pdf"

    run:
        from ntrfc.preprocessing.mesh_creation.domain_creation import create_2d_blocklines


        create_2d_blocklines(basedir,{wildcards.profile_name})


rule run_igg_cascademesh:
    input:
        "03_meshgeometry/{profile_name}_blocks.geom",
        "03_meshgeometry/{profile_name}_domain.geom"
    output:
        "04_mesh/{profile_name}_mesh.igg",
        "04_mesh/{profile_name}_mesh.msh",
        "04_mesh/{profile_name}_mesh.cgns"

    params:
        stuff=False
    run:
        #todo: this must be placed into a script, calling the singularity container
        from ntrfc.preprocessing.mesh_creation.igg_mesh import run_igg

        run_igg(basedir,{wildcards.profile_name},**params)
"""
rule profile_from_naca:
#    input:
#        "input/helloworld.txt"
    output:
        "01_geometry/sortedPoints.txt", "01_geometry/psPoly.vtk", "01_geometry/ssPoly.vtk", "01_geometry/midsPoly.vtk", "01_geometry/geometry_paras.yml"
    shell:
        "python helloworld.py"


rule profile_from_parsec:
#    input:
#        "input/helloworld.txt"
    output:
        "01_geometry/sortedPoints.txt", "01_geometry/psPoly.vtk", "01_geometry/ssPoly.vtk", "01_geometry/midsPoly.vtk", "01_geometry/geometry_paras.yml"
    shell:
        "python helloworld.py"
"""
