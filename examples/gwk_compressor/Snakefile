from snakemake.utils import validate
from ntrfc.utils.filehandling.datafiles import yaml_dict_read
from ntrfc.utils.filehandling.mesh import load_mesh
import numpy as np

#todo move this snakepipe to according dir in sourcecode

configfile : "casesettings.yaml"
validate(config,"config.schema.yaml")
basedir = workflow.current_basedir
"""
rule profile_from_pointcloud:
    input:
        "00_resources/profile_pointcloud.txt"
    output:
        "01_profile/sortedPoints.txt", "01_profile/psPoly.vtk", "01_profile/ssPoly.vtk", "01_profile/midsPoly.vtk", "01_profile/geometry_paras.yml",
        "01_profile/profile.pdf"
    run:
        from ntrfc.preprocessing.geometry_creation.profile_pointcloud import generate_profile_pointcloud_geometry

        generate_profile_pointcloud_geometry(config["blade"],basedir)
"""

"""
rule dumdidum:

    #snakemake Wasd1193.csv
    #1193 --> step f√ºr das Erzeugen von parameter (float, etc.)

    output:
        "Wasd{parameter_x}.csv"
    run:
        print(wildcards.parameter_x)
"""

rule create_2d_domain:
    input:
#        sortedPoints_fpath="01_profile/sortedPoints.txt",
        psPoly_fpath="01_profile/psPoly.vtk",
        ssPoly_fpath="01_profile/ssPoly.vtk",
        midsPoly_fpath="01_profile/midsPoly.vtk",
        geometry_paras_fpath="01_profile/geometry_paras.yml"
    output:
        "02_domainboundaries/inlet_2d.vtk","02_domainboundaries/outlet_2d.vtk",
        "02_domainboundaries/y_upper_2d.vtk","02_domainboundaries/y_lower_2d.vtk",
        "02_domainboundaries/domain.pdf"
    params:
        geometry=config["geometry"]
    run:
        from ntrfc.preprocessing.mesh_creation.domain_creation import create_2d_domain

        #todo: dateieinlesen nicht im rule, sondern in der funktion
        psPoly = load_mesh(input.psPoly_fpath)
        ssPoly = load_mesh(input.ssPoly_fpath)
        midsPoly = load_mesh(input.midsPoly_fpath)
        geometry_paras = yaml_dict_read(input.geometry_paras_fpath)

        create_2d_domain(params["geometry"],basedir,midsPoly,ssPoly,psPoly,geometry_paras)

"""
rule create_cascademesh:
    input:
    output:
    run:
"""

rule create_blockboundaries:
    input:
        "01_profile/sortedPoints.txt", "01_profile/psPoly.vtk", "01_profile/ssPoly.vtk",
        "01_profile/geometry_paras.yml" ,"01_profile/midsPoly.vtk" ,"02_domainboundaries/inlet_2d.vtk",
        "02_domainboundaries/outlet_2d.vtk", "02_domainboundaries/y_upper_2d.vtk", "02_domainboundaries/y_lower_2d.vtk"

    output:
        "03_meshgeometry/blocks.geom",
        "03_meshgeometry/domain.geom",
        "03_meshgeometry/blocklines.pdf"

    run:
        from ntrfc.preprocessing.mesh_creation.domain_creation import create_2d_blocklines

        #todo: params einpflegen, files in funktion laden
        sortedPoints_fpath = input[0]
        psPoly_fpath = input[1]
        ssPoly_fpath = input[2]
        geometry_paras_fpath = input[3]
        midsPoly_fpath = input[4]
        inlet_fpath = input[5]
        outlet_fpath = input[6]
        y_upper_fpath = input[7]
        y_lower_paras_fpath = input[8]

        sortedPoints = np.loadtxt(os.path.join(basedir,sortedPoints_fpath))
        psPoly = load_mesh(os.path.join(basedir,psPoly_fpath))
        ssPoly = load_mesh(os.path.join(basedir,ssPoly_fpath))
        geometry_paras = yaml_dict_read(os.path.join(basedir,geometry_paras_fpath))
        midsPoly = load_mesh(os.path.join(basedir,midsPoly_fpath))
        inlet = load_mesh(os.path.join(basedir,inlet_fpath))
        outlet = load_mesh(os.path.join(basedir,outlet_fpath))
        y_upper = load_mesh(os.path.join(basedir,y_upper_fpath))
        y_lower = load_mesh(os.path.join(basedir,y_lower_paras_fpath))

        create_2d_blocklines(config["blade"],basedir,sortedPoints,psPoly,ssPoly,geometry_paras,midsPoly,inlet,outlet,y_upper,y_lower)

"""
rule run_igg_cascademesh:
    input:
        "02_domainboundaries/inlet_2d.vtk", "02_domainboundaries/outlet_2d.vtk",
        "02_domainboundaries/y_upper_2d.vtk", "02_domainboundaries/y_lower_2d.vtk",
        "03_blockboundaries/ogridline_2d.vtk","03_blockboundaries/ogrid_oulet.vtk",
        "03_blockboundaries/ogrid_inlet.vtk","03_blockboundaries/te_ogrid.vtk","03_blockboundaries/le_ogrid.vtk",
        "03_blockboundaries/yupper_ogrid_x1.vtk","03_blockboundaries/ylower_ogrid_x1.vtk","03_blockboundaries/yupper_ogrid_x0.vtk",
        "03_blockboundaries/ylower_ogrid_x0.vtk","03_blockboundaries/ss_x1_ogrid_line.vtk","03_blockboundaries/ss_x0_ogrid_line.vtk",
        "03_blockboundaries/ps_x1_ogrid_line.vtk", "03_blockboundaries/ps_x0_ogrid_line.vtk"
    output:
        "04_meshgeometry/blocks.geom",
        "04_meshgeometry/domain.geom"
    run:
        from ntrf.preprocessing.mesh_creation.domain_creation import create_igg_geometry
"""
"""
rule profile_from_naca:
#    input:
#        "input/helloworld.txt"
    output:
        "01_geometry/sortedPoints.txt", "01_geometry/psPoly.vtk", "01_geometry/ssPoly.vtk", "01_geometry/midsPoly.vtk", "01_geometry/geometry_paras.yml"
    shell:
        "python helloworld.py"


rule profile_from_parsec:
#    input:
#        "input/helloworld.txt"
    output:
        "01_geometry/sortedPoints.txt", "01_geometry/psPoly.vtk", "01_geometry/ssPoly.vtk", "01_geometry/midsPoly.vtk", "01_geometry/geometry_paras.yml"
    shell:
        "python helloworld.py"
"""
